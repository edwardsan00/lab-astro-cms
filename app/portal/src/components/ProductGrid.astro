---
import type { Product } from '../mocks/products';

interface Props {
  products: Product[];
  columns?: 2 | 3 | 4;
  className?: string;
}

const { products, columns = 4, className = '' } = Astro.props;

const columnClasses = {
  2: 'grid-cols-1 sm:grid-cols-2',
  3: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4',
};
---
<div class={`grid gap-6 ${columnClasses[columns]} ${className}`}>
  {products.map((product) => (
    <div class="group overflow-hidden rounded-lg border border-gray-200 bg-white shadow-sm transition-all hover:shadow-md">
      <a href={`/${product.categorySlug}/${product.slug}`} class="block">
        <div class="relative overflow-hidden">
          <img 
            src={product.images[0]} 
            alt={product.name}
            class="h-64 w-full object-cover transition-transform duration-300 group-hover:scale-105" 
          />
          
          <div class="absolute left-2 top-2 flex flex-col gap-1">
            {product.isNew && (
              <span class="rounded bg-blue-600 px-2 py-1 text-xs font-medium text-white">
                Nuevo
              </span>
            )}
            {product.isSale && (
              <span class="rounded bg-red-600 px-2 py-1 text-xs font-medium text-white">
                Oferta
              </span>
            )}
            {product.originalPrice && (
              <span class="rounded bg-green-600 px-2 py-1 text-xs font-medium text-white">
                {Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)}% Off
              </span>
            )}
          </div>
        </div>
        
        <div class="p-4">
          <p class="text-sm text-gray-500">{product.categorySlug}</p>
          <h3 class="mt-1 text-base font-medium text-gray-900 group-hover:text-blue-600">{product.name}</h3>
          <div class="mt-1 flex items-end">
            <p class="text-lg font-medium text-gray-900">${product.price.toFixed(2)}</p>
            {product.originalPrice && (
              <p class="ml-2 text-sm text-gray-500 line-through">${product.originalPrice.toFixed(2)}</p>
            )}
          </div>
          
          {product.rating !== undefined && (
            <div class="mt-1 flex items-center">
              <div class="flex text-yellow-400">
                {Array.from({ length: Math.floor(product.rating) }).map((_, i) => (
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4">
                    <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
                  </svg>
                ))}
                {product.rating % 1 !== 0 && (
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-4 w-4">
                    <defs>
                      <linearGradient id="half-fill" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="50%" stop-color="currentColor" />
                        <stop offset="50%" stop-color="#D1D5DB" />
                      </linearGradient>
                    </defs>
                    <path fill="url(#half-fill)" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" />
                  </svg>
                )}
                {Array.from({ length: Math.floor(5 - product.rating) }).map((_, i) => (
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-4 w-4 text-gray-300">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
                  </svg>
                ))}
              </div>
              {product.reviewCount !== undefined && (
                <p class="ml-2 text-sm text-gray-500">({product.reviewCount})</p>
              )}
            </div>
          )}
        </div>
      </a>
    </div>
  ))}
</div> 